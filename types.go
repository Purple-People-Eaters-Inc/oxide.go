// Code generated by `generate`. DO NOT EDIT.

package oxide

import "time"

// ByteCount is a count of bytes, typically used either for memory or storage capacity
//
// The maximum supported byte count is [`i64::MAX`].  This makes it somewhat inconvenient to define constructors: a u32 constructor can be infallible, but an i64 constructor can fail (if the value is negative) and a u64 constructor can fail (if the value is larger than i64::MAX).  We provide all of these for consumers' convenience.
type ByteCount int

// Disk is client view of an [`Disk`]
type Disk struct {
	// Description is human-readable free-form text about a resource
	Description string `json:"description,omitempty" yaml:"description,omitempty"`
	DevicePath  string `json:"devicePath,omitempty" yaml:"devicePath,omitempty"`
	// ID is unique, immutable, system-controlled identifier for each resource
	ID string `json:"id,omitempty" yaml:"id,omitempty"`
	// Name is unique, mutable, user-controlled identifier for each resource
	Name      Name   `json:"name,omitempty" yaml:"name,omitempty"`
	ProjectId string `json:"projectId,omitempty" yaml:"projectId,omitempty"`
	// Size is a count of bytes, typically used either for memory or storage capacity
	//
	// The maximum supported byte count is [`i64::MAX`].  This makes it somewhat inconvenient to define constructors: a u32 constructor can be infallible, but an i64 constructor can fail (if the value is negative) and a u64 constructor can fail (if the value is larger than i64::MAX).  We provide all of these for consumers' convenience.
	Size       ByteCount `json:"size,omitempty" yaml:"size,omitempty"`
	SnapshotId string    `json:"snapshotId,omitempty" yaml:"snapshotId,omitempty"`
	// State is state of a Disk (primarily: attached or not)
	State DiskState `json:"state,omitempty" yaml:"state,omitempty"`
	// TimeCreated is timestamp when this resource was created
	TimeCreated *time.Time `json:"timeCreated,omitempty" yaml:"timeCreated,omitempty"`
	// TimeModified is timestamp when this resource was last modified
	TimeModified *time.Time `json:"timeModified,omitempty" yaml:"timeModified,omitempty"`
}

// DiskCreate is create-time parameters for a [`Disk`]
type DiskCreate struct {
	Description string `json:"description,omitempty" yaml:"description,omitempty"`
	// Name is names must begin with a lower case ASCII letter, be composed exclusively of lowercase ASCII, uppercase ASCII, numbers, and '-', and may not end with a '-'.
	Name Name `json:"name,omitempty" yaml:"name,omitempty"`
	// Size is size of the Disk
	Size ByteCount `json:"size,omitempty" yaml:"size,omitempty"`
	// SnapshotId is id for snapshot from which the Disk should be created, if any
	SnapshotId string `json:"snapshotId,omitempty" yaml:"snapshotId,omitempty"`
}

// DiskIdentifier is parameters for the [`Disk`] to be attached or detached to an instance
type DiskIdentifier struct {
	// Disk is names must begin with a lower case ASCII letter, be composed exclusively of lowercase ASCII, uppercase ASCII, numbers, and '-', and may not end with a '-'.
	Disk Name `json:"disk,omitempty" yaml:"disk,omitempty"`
}

// DiskResultsPage is a single page of results
type DiskResultsPage struct {
	// Items is list of items on this page of results
	Items []Disk `json:"items,omitempty" yaml:"items,omitempty"`
	// NextPage is token used to fetch the next page of results (if any)
	NextPage string `json:"next_page,omitempty" yaml:"next_page,omitempty"`
}

// DiskState is state of a Disk (primarily: attached or not)
// DiskState is disk is being initialized
type DiskState struct {
	State DiskStateState `json:"state,omitempty" yaml:"state,omitempty"`
}

// DiskStateState is the type definition for a DiskStateState.
type DiskStateState string

const (
	// DiskStateStateCreating represents the DiskStateState `"creating"`.
	DiskStateStateCreating DiskStateState = "creating"
)

// DiskStateStates is the collection of all DiskStateState values.
var DiskStateStates = []DiskStateState{
	DiskStateStateCreating,
}

// IdSortMode is supported set of sort modes for scanning by id only.
//
// Currently, we only support scanning in ascending order.
type IdSortMode string

const (
	// IdSortModeIdAscending represents the IdSortMode `"id-ascending"`.
	IdSortModeIdAscending IdSortMode = "id-ascending"
)

// IdSortModes is the collection of all IdSortMode values.
var IdSortModes = []IdSortMode{
	IdSortModeIdAscending,
}

// IdentityMetadata is identity-related metadata that's included in nearly all public API objects
type IdentityMetadata struct {
	// Description is human-readable free-form text about a resource
	Description string `json:"description,omitempty" yaml:"description,omitempty"`
	// ID is unique, immutable, system-controlled identifier for each resource
	ID string `json:"id,omitempty" yaml:"id,omitempty"`
	// Name is unique, mutable, user-controlled identifier for each resource
	Name Name `json:"name,omitempty" yaml:"name,omitempty"`
	// TimeCreated is timestamp when this resource was created
	TimeCreated *time.Time `json:"timeCreated,omitempty" yaml:"timeCreated,omitempty"`
	// TimeModified is timestamp when this resource was last modified
	TimeModified *time.Time `json:"timeModified,omitempty" yaml:"timeModified,omitempty"`
}

// Instance is client view of an [`Instance`]
type Instance struct {
	// Description is human-readable free-form text about a resource
	Description string `json:"description,omitempty" yaml:"description,omitempty"`
	// Hostname is rFC1035-compliant hostname for the Instance.
	Hostname string `json:"hostname,omitempty" yaml:"hostname,omitempty"`
	// ID is unique, immutable, system-controlled identifier for each resource
	ID string `json:"id,omitempty" yaml:"id,omitempty"`
	// Memory is memory allocated for this Instance
	Memory ByteCount `json:"memory,omitempty" yaml:"memory,omitempty"`
	// Name is unique, mutable, user-controlled identifier for each resource
	Name Name `json:"name,omitempty" yaml:"name,omitempty"`
	// Ncpus is number of CPUs allocated for this Instance
	Ncpus InstanceCpuCount `json:"ncpus,omitempty" yaml:"ncpus,omitempty"`
	// ProjectId is id for the project containing this Instance
	ProjectId string `json:"projectId,omitempty" yaml:"projectId,omitempty"`
	// RunState is running state of an Instance (primarily: booted or stopped)
	//
	// This typically reflects whether it's starting, running, stopping, or stopped, but also includes states related to the Instance's lifecycle
	RunState InstanceState `json:"runState,omitempty" yaml:"runState,omitempty"`
	// TimeCreated is timestamp when this resource was created
	TimeCreated *time.Time `json:"timeCreated,omitempty" yaml:"timeCreated,omitempty"`
	// TimeModified is timestamp when this resource was last modified
	TimeModified        *time.Time `json:"timeModified,omitempty" yaml:"timeModified,omitempty"`
	TimeRunStateUpdated *time.Time `json:"timeRunStateUpdated,omitempty" yaml:"timeRunStateUpdated,omitempty"`
}

// InstanceCpuCount is the number of CPUs in an Instance
type InstanceCpuCount int

// InstanceCreate is create-time parameters for an [`Instance`]
type InstanceCreate struct {
	Description string `json:"description,omitempty" yaml:"description,omitempty"`
	Hostname    string `json:"hostname,omitempty" yaml:"hostname,omitempty"`
	// Memory is a count of bytes, typically used either for memory or storage capacity
	//
	// The maximum supported byte count is [`i64::MAX`].  This makes it somewhat inconvenient to define constructors: a u32 constructor can be infallible, but an i64 constructor can fail (if the value is negative) and a u64 constructor can fail (if the value is larger than i64::MAX).  We provide all of these for consumers' convenience.
	Memory ByteCount `json:"memory,omitempty" yaml:"memory,omitempty"`
	// Name is names must begin with a lower case ASCII letter, be composed exclusively of lowercase ASCII, uppercase ASCII, numbers, and '-', and may not end with a '-'.
	Name Name `json:"name,omitempty" yaml:"name,omitempty"`
	// Ncpus is the number of CPUs in an Instance
	Ncpus InstanceCpuCount `json:"ncpus,omitempty" yaml:"ncpus,omitempty"`
}

// InstanceResultsPage is a single page of results
type InstanceResultsPage struct {
	// Items is list of items on this page of results
	Items []Instance `json:"items,omitempty" yaml:"items,omitempty"`
	// NextPage is token used to fetch the next page of results (if any)
	NextPage string `json:"next_page,omitempty" yaml:"next_page,omitempty"`
}

// InstanceState is running state of an Instance (primarily: booted or stopped)
//
// This typically reflects whether it's starting, running, stopping, or stopped, but also includes states related to the Instance's lifecycle
type InstanceState string

const (
	// InstanceStateCreating represents the InstanceState `"creating"`.
	InstanceStateCreating InstanceState = "creating"
	// InstanceStateStarting represents the InstanceState `"starting"`.
	InstanceStateStarting InstanceState = "starting"
	// InstanceStateRunning represents the InstanceState `"running"`.
	InstanceStateRunning InstanceState = "running"
	// InstanceStateStopping represents the InstanceState `"stopping"`.
	InstanceStateStopping InstanceState = "stopping"
	// InstanceStateStopped represents the InstanceState `"stopped"`.
	InstanceStateStopped InstanceState = "stopped"
	// InstanceStateRebooting represents the InstanceState `"rebooting"`.
	InstanceStateRebooting InstanceState = "rebooting"
	// InstanceStateRepairing represents the InstanceState `"repairing"`.
	InstanceStateRepairing InstanceState = "repairing"
	// InstanceStateFailed represents the InstanceState `"failed"`.
	InstanceStateFailed InstanceState = "failed"
	// InstanceStateDestroyed represents the InstanceState `"destroyed"`.
	InstanceStateDestroyed InstanceState = "destroyed"
)

// InstanceStates is the collection of all InstanceState values.
var InstanceStates = []InstanceState{
	InstanceStateCreating,
	InstanceStateStarting,
	InstanceStateRunning,
	InstanceStateStopping,
	InstanceStateStopped,
	InstanceStateRebooting,
	InstanceStateRepairing,
	InstanceStateFailed,
	InstanceStateDestroyed,
}

// IPv4Net is an IPv4 subnet, including prefix and subnet mask
type IPv4Net string

// IPv6Net is an IPv6 subnet, including prefix and subnet mask
type IPv6Net string

// L4PortRange is an inclusive-inclusive range of IP ports. The second port may be omitted to represent a single port
type L4PortRange string

// LoginParams is the type definition for a LoginParams.
type LoginParams struct {
	Username string `json:"username,omitempty" yaml:"username,omitempty"`
}

// MacAddr is a Media Access Control address, in EUI-48 format
type MacAddr string

// Name is names must begin with a lower case ASCII letter, be composed exclusively of lowercase ASCII, uppercase ASCII, numbers, and '-', and may not end with a '-'.
type Name string

// NameOrIdSortMode is supported set of sort modes for scanning by name or id
type NameOrIdSortMode string

const (
	// NameOrIdSortModeNameAscending represents the NameOrIdSortMode `"name-ascending"`.
	NameOrIdSortModeNameAscending NameOrIdSortMode = "name-ascending"
	// NameOrIdSortModeNameDescending represents the NameOrIdSortMode `"name-descending"`.
	NameOrIdSortModeNameDescending NameOrIdSortMode = "name-descending"
	// NameOrIdSortModeIdAscending represents the NameOrIdSortMode `"id-ascending"`.
	NameOrIdSortModeIdAscending NameOrIdSortMode = "id-ascending"
)

// NameOrIdSortModes is the collection of all NameOrIdSortMode values.
var NameOrIdSortModes = []NameOrIdSortMode{
	NameOrIdSortModeNameAscending,
	NameOrIdSortModeNameDescending,
	NameOrIdSortModeIdAscending,
}

// NameSortMode is supported set of sort modes for scanning by name only
//
// Currently, we only support scanning in ascending order.
type NameSortMode string

const (
	// NameSortModeNameAscending represents the NameSortMode `"name-ascending"`.
	NameSortModeNameAscending NameSortMode = "name-ascending"
)

// NameSortModes is the collection of all NameSortMode values.
var NameSortModes = []NameSortMode{
	NameSortModeNameAscending,
}

// NetworkInterface is a `NetworkInterface` represents a virtual network interface device.
type NetworkInterface struct {
	// Identity is common identifying metadata
	Identity IdentityMetadata `json:"identity,omitempty" yaml:"identity,omitempty"`
	// InstanceId is the Instance to which the interface belongs.
	InstanceId string `json:"instance_id,omitempty" yaml:"instance_id,omitempty"`
	// Ip is the IP address assigned to this interface.
	Ip string `json:"ip,omitempty" yaml:"ip,omitempty"`
	// Mac is the MAC address assigned to this interface.
	Mac MacAddr `json:"mac,omitempty" yaml:"mac,omitempty"`
	// SubnetId is the subnet to which the interface belongs.
	SubnetId string `json:"subnet_id,omitempty" yaml:"subnet_id,omitempty"`
	// VPCId is the VPC to which the interface belongs.
	VPCId string `json:"vpc_id,omitempty" yaml:"vpc_id,omitempty"`
}

// NetworkInterfaceResultsPage is a single page of results
type NetworkInterfaceResultsPage struct {
	// Items is list of items on this page of results
	Items []NetworkInterface `json:"items,omitempty" yaml:"items,omitempty"`
	// NextPage is token used to fetch the next page of results (if any)
	NextPage string `json:"next_page,omitempty" yaml:"next_page,omitempty"`
}

// Organization is client view of an [`Organization`]
type Organization struct {
	// Description is human-readable free-form text about a resource
	Description string `json:"description,omitempty" yaml:"description,omitempty"`
	// ID is unique, immutable, system-controlled identifier for each resource
	ID string `json:"id,omitempty" yaml:"id,omitempty"`
	// Name is unique, mutable, user-controlled identifier for each resource
	Name Name `json:"name,omitempty" yaml:"name,omitempty"`
	// TimeCreated is timestamp when this resource was created
	TimeCreated *time.Time `json:"timeCreated,omitempty" yaml:"timeCreated,omitempty"`
	// TimeModified is timestamp when this resource was last modified
	TimeModified *time.Time `json:"timeModified,omitempty" yaml:"timeModified,omitempty"`
}

// OrganizationCreate is create-time parameters for an [`Organization`]
type OrganizationCreate struct {
	Description string `json:"description,omitempty" yaml:"description,omitempty"`
	// Name is names must begin with a lower case ASCII letter, be composed exclusively of lowercase ASCII, uppercase ASCII, numbers, and '-', and may not end with a '-'.
	Name Name `json:"name,omitempty" yaml:"name,omitempty"`
}

// OrganizationResultsPage is a single page of results
type OrganizationResultsPage struct {
	// Items is list of items on this page of results
	Items []Organization `json:"items,omitempty" yaml:"items,omitempty"`
	// NextPage is token used to fetch the next page of results (if any)
	NextPage string `json:"next_page,omitempty" yaml:"next_page,omitempty"`
}

// OrganizationUpdate is updateable properties of an [`Organization`]
type OrganizationUpdate struct {
	Description string `json:"description,omitempty" yaml:"description,omitempty"`
	Name        Name   `json:"name,omitempty" yaml:"name,omitempty"`
}

// Project is client view of a [`Project`]
type Project struct {
	// Description is human-readable free-form text about a resource
	Description string `json:"description,omitempty" yaml:"description,omitempty"`
	// ID is unique, immutable, system-controlled identifier for each resource
	ID string `json:"id,omitempty" yaml:"id,omitempty"`
	// Name is unique, mutable, user-controlled identifier for each resource
	Name           Name   `json:"name,omitempty" yaml:"name,omitempty"`
	OrganizationId string `json:"organizationId,omitempty" yaml:"organizationId,omitempty"`
	// TimeCreated is timestamp when this resource was created
	TimeCreated *time.Time `json:"timeCreated,omitempty" yaml:"timeCreated,omitempty"`
	// TimeModified is timestamp when this resource was last modified
	TimeModified *time.Time `json:"timeModified,omitempty" yaml:"timeModified,omitempty"`
}

// ProjectCreate is create-time parameters for a [`Project`]
type ProjectCreate struct {
	Description string `json:"description,omitempty" yaml:"description,omitempty"`
	// Name is names must begin with a lower case ASCII letter, be composed exclusively of lowercase ASCII, uppercase ASCII, numbers, and '-', and may not end with a '-'.
	Name Name `json:"name,omitempty" yaml:"name,omitempty"`
}

// ProjectResultsPage is a single page of results
type ProjectResultsPage struct {
	// Items is list of items on this page of results
	Items []Project `json:"items,omitempty" yaml:"items,omitempty"`
	// NextPage is token used to fetch the next page of results (if any)
	NextPage string `json:"next_page,omitempty" yaml:"next_page,omitempty"`
}

// ProjectUpdate is updateable properties of a [`Project`]
type ProjectUpdate struct {
	Description string `json:"description,omitempty" yaml:"description,omitempty"`
	Name        Name   `json:"name,omitempty" yaml:"name,omitempty"`
}

// Rack is client view of an [`Rack`]
type Rack struct {
	// Identity is identity-related metadata that's included in nearly all public API objects
	Identity IdentityMetadata `json:"identity,omitempty" yaml:"identity,omitempty"`
}

// RackResultsPage is a single page of results
type RackResultsPage struct {
	// Items is list of items on this page of results
	Items []Rack `json:"items,omitempty" yaml:"items,omitempty"`
	// NextPage is token used to fetch the next page of results (if any)
	NextPage string `json:"next_page,omitempty" yaml:"next_page,omitempty"`
}

// RouteDestination is a subset of [`NetworkTarget`], `RouteDestination` specifies the kind of network traffic that will be matched to be forwarded to the [`RouteTarget`].
// RouteDestination is the type definition for a RouteDestination.
type RouteDestination struct {
	Type  RouteDestinationType `json:"type,omitempty" yaml:"type,omitempty"`
	Value string               `json:"value,omitempty" yaml:"value,omitempty"`
}

// RouteDestinationType is the type definition for a RouteDestinationType.
type RouteDestinationType string

const (
	// RouteDestinationTypeIp represents the RouteDestinationType `"ip"`.
	RouteDestinationTypeIp RouteDestinationType = "ip"
)

// RouteDestinationTypes is the collection of all RouteDestinationType values.
var RouteDestinationTypes = []RouteDestinationType{
	RouteDestinationTypeIp,
}

// RouteTarget is a subset of [`NetworkTarget`], `RouteTarget` specifies all possible targets that a route can forward to.
// RouteTarget is the type definition for a RouteTarget.
type RouteTarget struct {
	Type  RouteTargetType `json:"type,omitempty" yaml:"type,omitempty"`
	Value string          `json:"value,omitempty" yaml:"value,omitempty"`
}

// RouteTargetType is the type definition for a RouteTargetType.
type RouteTargetType string

const (
	// RouteTargetTypeIp represents the RouteTargetType `"ip"`.
	RouteTargetTypeIp RouteTargetType = "ip"
)

// RouteTargetTypes is the collection of all RouteTargetType values.
var RouteTargetTypes = []RouteTargetType{
	RouteTargetTypeIp,
}

// RouterRoute is a route defines a rule that governs where traffic should be sent based on its destination.
type RouterRoute struct {
	// Destination is a subset of [`NetworkTarget`], `RouteDestination` specifies the kind of network traffic that will be matched to be forwarded to the [`RouteTarget`].
	Destination RouteDestination `json:"destination,omitempty" yaml:"destination,omitempty"`
	// Identity is common identifying metadata
	Identity IdentityMetadata `json:"identity,omitempty" yaml:"identity,omitempty"`
	// Kind is describes the kind of router. Set at creation. `read-only`
	Kind RouterRouteKind `json:"kind,omitempty" yaml:"kind,omitempty"`
	// RouterId is the VPC Router to which the route belongs.
	RouterId string `json:"router_id,omitempty" yaml:"router_id,omitempty"`
	// Target is a subset of [`NetworkTarget`], `RouteTarget` specifies all possible targets that a route can forward to.
	Target RouteTarget `json:"target,omitempty" yaml:"target,omitempty"`
}

// RouterRouteCreateParams is create-time parameters for a [`RouterRoute`]
type RouterRouteCreateParams struct {
	Description string `json:"description,omitempty" yaml:"description,omitempty"`
	// Destination is a subset of [`NetworkTarget`], `RouteDestination` specifies the kind of network traffic that will be matched to be forwarded to the [`RouteTarget`].
	Destination RouteDestination `json:"destination,omitempty" yaml:"destination,omitempty"`
	// Name is names must begin with a lower case ASCII letter, be composed exclusively of lowercase ASCII, uppercase ASCII, numbers, and '-', and may not end with a '-'.
	Name Name `json:"name,omitempty" yaml:"name,omitempty"`
	// Target is a subset of [`NetworkTarget`], `RouteTarget` specifies all possible targets that a route can forward to.
	Target RouteTarget `json:"target,omitempty" yaml:"target,omitempty"`
}

// RouterRouteKind is the classification of a [`RouterRoute`] as defined by the system. The kind determines certain attributes such as if the route is modifiable and describes how or where the route was created.
//
// See [RFD-21](https://rfd.shared.oxide.computer/rfd/0021#concept-router) for more context
type RouterRouteKind string

const (
	// RouterRouteKindDefault represents the RouterRouteKind `"Default"`.
	RouterRouteKindDefault RouterRouteKind = "Default"
	// RouterRouteKindVpcSubnet represents the RouterRouteKind `"VpcSubnet"`.
	RouterRouteKindVpcSubnet RouterRouteKind = "VpcSubnet"
	// RouterRouteKindVpcPeering represents the RouterRouteKind `"VpcPeering"`.
	RouterRouteKindVpcPeering RouterRouteKind = "VpcPeering"
	// RouterRouteKindCustom represents the RouterRouteKind `"Custom"`.
	RouterRouteKindCustom RouterRouteKind = "Custom"
)

// RouterRouteKinds is the collection of all RouterRouteKind values.
var RouterRouteKinds = []RouterRouteKind{
	RouterRouteKindDefault,
	RouterRouteKindVpcSubnet,
	RouterRouteKindVpcPeering,
	RouterRouteKindCustom,
}

// RouterRouteResultsPage is a single page of results
type RouterRouteResultsPage struct {
	// Items is list of items on this page of results
	Items []RouterRoute `json:"items,omitempty" yaml:"items,omitempty"`
	// NextPage is token used to fetch the next page of results (if any)
	NextPage string `json:"next_page,omitempty" yaml:"next_page,omitempty"`
}

// RouterRouteUpdateParams is updateable properties of a [`RouterRoute`]
type RouterRouteUpdateParams struct {
	Description string `json:"description,omitempty" yaml:"description,omitempty"`
	// Destination is a subset of [`NetworkTarget`], `RouteDestination` specifies the kind of network traffic that will be matched to be forwarded to the [`RouteTarget`].
	Destination RouteDestination `json:"destination,omitempty" yaml:"destination,omitempty"`
	Name        Name             `json:"name,omitempty" yaml:"name,omitempty"`
	// Target is a subset of [`NetworkTarget`], `RouteTarget` specifies all possible targets that a route can forward to.
	Target RouteTarget `json:"target,omitempty" yaml:"target,omitempty"`
}

// Saga is the type definition for a Saga.
type Saga struct {
	ID    string    `json:"id,omitempty" yaml:"id,omitempty"`
	State SagaState `json:"state,omitempty" yaml:"state,omitempty"`
}

// SagaErrorInfo is the type definition for a SagaErrorInfo.
// SagaErrorInfo is the type definition for a SagaErrorInfo.
type SagaErrorInfo struct {
	Error       SagaErrorInfoError `json:"error,omitempty" yaml:"error,omitempty"`
	SourceError TODO               `json:"source_error,omitempty" yaml:"source_error,omitempty"`
}

// SagaErrorInfoError is the type definition for a SagaErrorInfoError.
type SagaErrorInfoError string

const (
	// SagaErrorInfoErrorActionFailed represents the SagaErrorInfoError `"actionFailed"`.
	SagaErrorInfoErrorActionFailed SagaErrorInfoError = "actionFailed"
)

// SagaErrorInfoErrors is the collection of all SagaErrorInfoError values.
var SagaErrorInfoErrors = []SagaErrorInfoError{
	SagaErrorInfoErrorActionFailed,
}

// SagaResultsPage is a single page of results
type SagaResultsPage struct {
	// Items is list of items on this page of results
	Items []Saga `json:"items,omitempty" yaml:"items,omitempty"`
	// NextPage is token used to fetch the next page of results (if any)
	NextPage string `json:"next_page,omitempty" yaml:"next_page,omitempty"`
}

// SagaState is the type definition for a SagaState.
// SagaState is the type definition for a SagaState.
type SagaState struct {
	State SagaStateState `json:"state,omitempty" yaml:"state,omitempty"`
}

// SagaStateState is the type definition for a SagaStateState.
type SagaStateState string

const (
	// SagaStateStateRunning represents the SagaStateState `"running"`.
	SagaStateStateRunning SagaStateState = "running"
)

// SagaStateStates is the collection of all SagaStateState values.
var SagaStateStates = []SagaStateState{
	SagaStateStateRunning,
}

// Sled is client view of an [`Sled`]
type Sled struct {
	// Description is human-readable free-form text about a resource
	Description string `json:"description,omitempty" yaml:"description,omitempty"`
	// ID is unique, immutable, system-controlled identifier for each resource
	ID string `json:"id,omitempty" yaml:"id,omitempty"`
	// Name is unique, mutable, user-controlled identifier for each resource
	Name           Name   `json:"name,omitempty" yaml:"name,omitempty"`
	ServiceAddress string `json:"serviceAddress,omitempty" yaml:"serviceAddress,omitempty"`
	// TimeCreated is timestamp when this resource was created
	TimeCreated *time.Time `json:"timeCreated,omitempty" yaml:"timeCreated,omitempty"`
	// TimeModified is timestamp when this resource was last modified
	TimeModified *time.Time `json:"timeModified,omitempty" yaml:"timeModified,omitempty"`
}

// SledResultsPage is a single page of results
type SledResultsPage struct {
	// Items is list of items on this page of results
	Items []Sled `json:"items,omitempty" yaml:"items,omitempty"`
	// NextPage is token used to fetch the next page of results (if any)
	NextPage string `json:"next_page,omitempty" yaml:"next_page,omitempty"`
}

// User is client view of a [`User`]
type User struct {
	// Description is human-readable free-form text about a resource
	Description string `json:"description,omitempty" yaml:"description,omitempty"`
	// ID is unique, immutable, system-controlled identifier for each resource
	ID string `json:"id,omitempty" yaml:"id,omitempty"`
	// Name is unique, mutable, user-controlled identifier for each resource
	Name Name `json:"name,omitempty" yaml:"name,omitempty"`
	// TimeCreated is timestamp when this resource was created
	TimeCreated *time.Time `json:"timeCreated,omitempty" yaml:"timeCreated,omitempty"`
	// TimeModified is timestamp when this resource was last modified
	TimeModified *time.Time `json:"timeModified,omitempty" yaml:"timeModified,omitempty"`
}

// UserResultsPage is a single page of results
type UserResultsPage struct {
	// Items is list of items on this page of results
	Items []User `json:"items,omitempty" yaml:"items,omitempty"`
	// NextPage is token used to fetch the next page of results (if any)
	NextPage string `json:"next_page,omitempty" yaml:"next_page,omitempty"`
}

// VPC is client view of a [`Vpc`]
type VPC struct {
	// Description is human-readable free-form text about a resource
	Description string `json:"description,omitempty" yaml:"description,omitempty"`
	// DnsName is the name used for the VPC in DNS.
	DnsName Name `json:"dnsName,omitempty" yaml:"dnsName,omitempty"`
	// ID is unique, immutable, system-controlled identifier for each resource
	ID string `json:"id,omitempty" yaml:"id,omitempty"`
	// Name is unique, mutable, user-controlled identifier for each resource
	Name Name `json:"name,omitempty" yaml:"name,omitempty"`
	// ProjectId is id for the project containing this VPC
	ProjectId string `json:"projectId,omitempty" yaml:"projectId,omitempty"`
	// SystemRouterId is id for the system router where subnet default routes are registered
	SystemRouterId string `json:"systemRouterId,omitempty" yaml:"systemRouterId,omitempty"`
	// TimeCreated is timestamp when this resource was created
	TimeCreated *time.Time `json:"timeCreated,omitempty" yaml:"timeCreated,omitempty"`
	// TimeModified is timestamp when this resource was last modified
	TimeModified *time.Time `json:"timeModified,omitempty" yaml:"timeModified,omitempty"`
}

// VPCCreate is create-time parameters for a [`Vpc`]
type VPCCreate struct {
	Description string `json:"description,omitempty" yaml:"description,omitempty"`
	// DnsName is names must begin with a lower case ASCII letter, be composed exclusively of lowercase ASCII, uppercase ASCII, numbers, and '-', and may not end with a '-'.
	DnsName Name `json:"dnsName,omitempty" yaml:"dnsName,omitempty"`
	// Name is names must begin with a lower case ASCII letter, be composed exclusively of lowercase ASCII, uppercase ASCII, numbers, and '-', and may not end with a '-'.
	Name Name `json:"name,omitempty" yaml:"name,omitempty"`
}

// VPCFirewallRule is a single rule in a VPC firewall
type VPCFirewallRule struct {
	// Action is whether traffic matching the rule should be allowed or dropped
	Action VPCFirewallRuleAction `json:"action,omitempty" yaml:"action,omitempty"`
	// Direction is whether this rule is for incoming or outgoing traffic
	Direction VPCFirewallRuleDirection `json:"direction,omitempty" yaml:"direction,omitempty"`
	// Filters is reductions on the scope of the rule
	Filters VPCFirewallRuleFilter `json:"filters,omitempty" yaml:"filters,omitempty"`
	// Identity is common identifying metadata
	Identity IdentityMetadata `json:"identity,omitempty" yaml:"identity,omitempty"`
	// Priority is the relative priority of this rule
	Priority int `json:"priority,omitempty" yaml:"priority,omitempty"`
	// Status is whether this rule is in effect
	Status VPCFirewallRuleStatus `json:"status,omitempty" yaml:"status,omitempty"`
	// Targets is list of sets of instances that the rule applies to
	Targets []VPCFirewallRuleTarget `json:"targets,omitempty" yaml:"targets,omitempty"`
}

// VPCFirewallRuleAction is the type definition for a VPCFirewallRuleAction.
type VPCFirewallRuleAction string

const (
	// VPCFirewallRuleActionAllow represents the VPCFirewallRuleAction `"allow"`.
	VPCFirewallRuleActionAllow VPCFirewallRuleAction = "allow"
	// VPCFirewallRuleActionDeny represents the VPCFirewallRuleAction `"deny"`.
	VPCFirewallRuleActionDeny VPCFirewallRuleAction = "deny"
)

// VPCFirewallRuleActions is the collection of all VPCFirewallRuleAction values.
var VPCFirewallRuleActions = []VPCFirewallRuleAction{
	VPCFirewallRuleActionAllow,
	VPCFirewallRuleActionDeny,
}

// VPCFirewallRuleDirection is the type definition for a VPCFirewallRuleDirection.
type VPCFirewallRuleDirection string

const (
	// VPCFirewallRuleDirectionInbound represents the VPCFirewallRuleDirection `"inbound"`.
	VPCFirewallRuleDirectionInbound VPCFirewallRuleDirection = "inbound"
	// VPCFirewallRuleDirectionOutbound represents the VPCFirewallRuleDirection `"outbound"`.
	VPCFirewallRuleDirectionOutbound VPCFirewallRuleDirection = "outbound"
)

// VPCFirewallRuleDirections is the collection of all VPCFirewallRuleDirection values.
var VPCFirewallRuleDirections = []VPCFirewallRuleDirection{
	VPCFirewallRuleDirectionInbound,
	VPCFirewallRuleDirectionOutbound,
}

// VPCFirewallRuleFilter is filter for a firewall rule. A given packet must match every field that is present for the rule to apply to it. A packet matches a field if any entry in that field matches the packet.
type VPCFirewallRuleFilter struct {
	// Hosts is if present, the sources (if incoming) or destinations (if outgoing) this rule applies to.
	Hosts []VPCFirewallRuleHostFilter `json:"hosts,omitempty" yaml:"hosts,omitempty"`
	// Ports is if present, the destination ports this rule applies to.
	Ports []L4PortRange `json:"ports,omitempty" yaml:"ports,omitempty"`
	// Protocols is if present, the networking protocols this rule applies to.
	Protocols []VPCFirewallRuleProtocol `json:"protocols,omitempty" yaml:"protocols,omitempty"`
}

// VPCFirewallRuleHostFilter is a subset of [`NetworkTarget`], `VpcFirewallRuleHostFilter` specifies all possible targets that a route can forward to.
// VPCFirewallRuleHostFilter is the type definition for a VPCFirewallRuleHostFilter.
type VPCFirewallRuleHostFilter struct {
	Type VPCFirewallRuleHostFilterType `json:"type,omitempty" yaml:"type,omitempty"`
	// Value is names must begin with a lower case ASCII letter, be composed exclusively of lowercase ASCII, uppercase ASCII, numbers, and '-', and may not end with a '-'.
	Value Name `json:"value,omitempty" yaml:"value,omitempty"`
}

// VPCFirewallRuleHostFilterType is the type definition for a VPCFirewallRuleHostFilterType.
type VPCFirewallRuleHostFilterType string

const (
	// VPCFirewallRuleHostFilterTypeVpc represents the VPCFirewallRuleHostFilterType `"vpc"`.
	VPCFirewallRuleHostFilterTypeVpc VPCFirewallRuleHostFilterType = "vpc"
)

// VPCFirewallRuleHostFilterTypes is the collection of all VPCFirewallRuleHostFilterType values.
var VPCFirewallRuleHostFilterTypes = []VPCFirewallRuleHostFilterType{
	VPCFirewallRuleHostFilterTypeVpc,
}

// VPCFirewallRuleProtocol is the protocols that may be specified in a firewall rule's filter
type VPCFirewallRuleProtocol string

const (
	// VPCFirewallRuleProtocolTCP represents the VPCFirewallRuleProtocol `"TCP"`.
	VPCFirewallRuleProtocolTCP VPCFirewallRuleProtocol = "TCP"
	// VPCFirewallRuleProtocolUDP represents the VPCFirewallRuleProtocol `"UDP"`.
	VPCFirewallRuleProtocolUDP VPCFirewallRuleProtocol = "UDP"
	// VPCFirewallRuleProtocolICMP represents the VPCFirewallRuleProtocol `"ICMP"`.
	VPCFirewallRuleProtocolICMP VPCFirewallRuleProtocol = "ICMP"
)

// VPCFirewallRuleProtocols is the collection of all VPCFirewallRuleProtocol values.
var VPCFirewallRuleProtocols = []VPCFirewallRuleProtocol{
	VPCFirewallRuleProtocolTCP,
	VPCFirewallRuleProtocolUDP,
	VPCFirewallRuleProtocolICMP,
}

// VPCFirewallRuleResultsPage is a single page of results
type VPCFirewallRuleResultsPage struct {
	// Items is list of items on this page of results
	Items []VPCFirewallRule `json:"items,omitempty" yaml:"items,omitempty"`
	// NextPage is token used to fetch the next page of results (if any)
	NextPage string `json:"next_page,omitempty" yaml:"next_page,omitempty"`
}

// VPCFirewallRuleStatus is the type definition for a VPCFirewallRuleStatus.
type VPCFirewallRuleStatus string

const (
	// VPCFirewallRuleStatusDisabled represents the VPCFirewallRuleStatus `"disabled"`.
	VPCFirewallRuleStatusDisabled VPCFirewallRuleStatus = "disabled"
	// VPCFirewallRuleStatusEnabled represents the VPCFirewallRuleStatus `"enabled"`.
	VPCFirewallRuleStatusEnabled VPCFirewallRuleStatus = "enabled"
)

// VPCFirewallRuleStatuses is the collection of all VPCFirewallRuleStatus values.
var VPCFirewallRuleStatuses = []VPCFirewallRuleStatus{
	VPCFirewallRuleStatusDisabled,
	VPCFirewallRuleStatusEnabled,
}

// VPCFirewallRuleTarget is a subset of [`NetworkTarget`], `VpcFirewallRuleTarget` specifies all possible targets that a firewall rule can be attached to.
// VPCFirewallRuleTarget is the type definition for a VPCFirewallRuleTarget.
type VPCFirewallRuleTarget struct {
	Type VPCFirewallRuleTargetType `json:"type,omitempty" yaml:"type,omitempty"`
	// Value is names must begin with a lower case ASCII letter, be composed exclusively of lowercase ASCII, uppercase ASCII, numbers, and '-', and may not end with a '-'.
	Value Name `json:"value,omitempty" yaml:"value,omitempty"`
}

// VPCFirewallRuleTargetType is the type definition for a VPCFirewallRuleTargetType.
type VPCFirewallRuleTargetType string

const (
	// VPCFirewallRuleTargetTypeVpc represents the VPCFirewallRuleTargetType `"vpc"`.
	VPCFirewallRuleTargetTypeVpc VPCFirewallRuleTargetType = "vpc"
)

// VPCFirewallRuleTargetTypes is the collection of all VPCFirewallRuleTargetType values.
var VPCFirewallRuleTargetTypes = []VPCFirewallRuleTargetType{
	VPCFirewallRuleTargetTypeVpc,
}

// VPCFirewallRuleUpdate is a single rule in a VPC firewall
type VPCFirewallRuleUpdate struct {
	// Action is whether traffic matching the rule should be allowed or dropped
	Action VPCFirewallRuleAction `json:"action,omitempty" yaml:"action,omitempty"`
	// Description is human-readable free-form text about a resource
	Description string `json:"description,omitempty" yaml:"description,omitempty"`
	// Direction is whether this rule is for incoming or outgoing traffic
	Direction VPCFirewallRuleDirection `json:"direction,omitempty" yaml:"direction,omitempty"`
	// Filters is reductions on the scope of the rule
	Filters VPCFirewallRuleFilter `json:"filters,omitempty" yaml:"filters,omitempty"`
	// Priority is the relative priority of this rule
	Priority int `json:"priority,omitempty" yaml:"priority,omitempty"`
	// Status is whether this rule is in effect
	Status VPCFirewallRuleStatus `json:"status,omitempty" yaml:"status,omitempty"`
	// Targets is list of sets of instances that the rule applies to
	Targets []VPCFirewallRuleTarget `json:"targets,omitempty" yaml:"targets,omitempty"`
}

// VPCFirewallRuleUpdateParams is updateable properties of a [`Vpc`]'s firewall Note that VpcFirewallRules are implicitly created along with a Vpc, so there is no explicit creation.
type VPCFirewallRuleUpdateParams struct {
}

// VPCFirewallRuleUpdateResult is response to an update replacing [`Vpc`]'s firewall
type VPCFirewallRuleUpdateResult struct {
}

// VPCResultsPage is a single page of results
type VPCResultsPage struct {
	// Items is list of items on this page of results
	Items []VPC `json:"items,omitempty" yaml:"items,omitempty"`
	// NextPage is token used to fetch the next page of results (if any)
	NextPage string `json:"next_page,omitempty" yaml:"next_page,omitempty"`
}

// VPCRouter is a VPC router defines a series of rules that indicate where traffic should be sent depending on its destination.
type VPCRouter struct {
	// Identity is common identifying metadata
	Identity IdentityMetadata `json:"identity,omitempty" yaml:"identity,omitempty"`
	Kind     VPCRouterKind    `json:"kind,omitempty" yaml:"kind,omitempty"`
	// VPCId is the VPC to which the router belongs.
	VPCId string `json:"vpc_id,omitempty" yaml:"vpc_id,omitempty"`
}

// VPCRouterCreate is create-time parameters for a [`VpcRouter`]
type VPCRouterCreate struct {
	Description string `json:"description,omitempty" yaml:"description,omitempty"`
	// Name is names must begin with a lower case ASCII letter, be composed exclusively of lowercase ASCII, uppercase ASCII, numbers, and '-', and may not end with a '-'.
	Name Name `json:"name,omitempty" yaml:"name,omitempty"`
}

// VPCRouterKind is the type definition for a VPCRouterKind.
type VPCRouterKind string

const (
	// VPCRouterKindSystem represents the VPCRouterKind `"system"`.
	VPCRouterKindSystem VPCRouterKind = "system"
	// VPCRouterKindCustom represents the VPCRouterKind `"custom"`.
	VPCRouterKindCustom VPCRouterKind = "custom"
)

// VPCRouterKinds is the collection of all VPCRouterKind values.
var VPCRouterKinds = []VPCRouterKind{
	VPCRouterKindSystem,
	VPCRouterKindCustom,
}

// VPCRouterResultsPage is a single page of results
type VPCRouterResultsPage struct {
	// Items is list of items on this page of results
	Items []VPCRouter `json:"items,omitempty" yaml:"items,omitempty"`
	// NextPage is token used to fetch the next page of results (if any)
	NextPage string `json:"next_page,omitempty" yaml:"next_page,omitempty"`
}

// VPCRouterUpdate is updateable properties of a [`VpcRouter`]
type VPCRouterUpdate struct {
	Description string `json:"description,omitempty" yaml:"description,omitempty"`
	Name        Name   `json:"name,omitempty" yaml:"name,omitempty"`
}

// VPCSubnet is a VPC subnet represents a logical grouping for instances that allows network traffic between them, within a IPv4 subnetwork or optionall an IPv6 subnetwork.
type VPCSubnet struct {
	// Identity is common identifying metadata
	Identity IdentityMetadata `json:"identity,omitempty" yaml:"identity,omitempty"`
	// IPv4Block is the IPv4 subnet CIDR block.
	IPv4Block IPv4Net `json:"ipv4_block,omitempty" yaml:"ipv4_block,omitempty"`
	// IPv6Block is the IPv6 subnet CIDR block.
	IPv6Block IPv6Net `json:"ipv6_block,omitempty" yaml:"ipv6_block,omitempty"`
	// VPCId is the VPC to which the subnet belongs.
	VPCId string `json:"vpc_id,omitempty" yaml:"vpc_id,omitempty"`
}

// VPCSubnetCreate is create-time parameters for a [`VpcSubnet`]
type VPCSubnetCreate struct {
	Description string  `json:"description,omitempty" yaml:"description,omitempty"`
	IPv4Block   IPv4Net `json:"ipv4Block,omitempty" yaml:"ipv4Block,omitempty"`
	IPv6Block   IPv6Net `json:"ipv6Block,omitempty" yaml:"ipv6Block,omitempty"`
	// Name is names must begin with a lower case ASCII letter, be composed exclusively of lowercase ASCII, uppercase ASCII, numbers, and '-', and may not end with a '-'.
	Name Name `json:"name,omitempty" yaml:"name,omitempty"`
}

// VPCSubnetResultsPage is a single page of results
type VPCSubnetResultsPage struct {
	// Items is list of items on this page of results
	Items []VPCSubnet `json:"items,omitempty" yaml:"items,omitempty"`
	// NextPage is token used to fetch the next page of results (if any)
	NextPage string `json:"next_page,omitempty" yaml:"next_page,omitempty"`
}

// VPCSubnetUpdate is updateable properties of a [`VpcSubnet`]
type VPCSubnetUpdate struct {
	Description string  `json:"description,omitempty" yaml:"description,omitempty"`
	IPv4Block   IPv4Net `json:"ipv4Block,omitempty" yaml:"ipv4Block,omitempty"`
	IPv6Block   IPv6Net `json:"ipv6Block,omitempty" yaml:"ipv6Block,omitempty"`
	Name        Name    `json:"name,omitempty" yaml:"name,omitempty"`
}

// VPCUpdate is updateable properties of a [`Vpc`]
type VPCUpdate struct {
	Description string `json:"description,omitempty" yaml:"description,omitempty"`
	DnsName     Name   `json:"dnsName,omitempty" yaml:"dnsName,omitempty"`
	Name        Name   `json:"name,omitempty" yaml:"name,omitempty"`
}
